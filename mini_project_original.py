# -*- coding: utf-8 -*-
"""mini project original.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hr4kberqcNgaT8n_SsZtMGELMwI2s7fL
"""

# Import Libraries
import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import os
import cv2
import glob
import matplotlib.pyplot as plt
# Keras API
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten
from keras.layers import Conv2D,MaxPooling2D,Activation,AveragePooling2D,BatchNormalization
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop

from google.colab import drive
drive.mount('/content/drive')

train_dir ="/content/drive/MyDrive/MINI PROJECT/Disease images/train"
test_dir="/content/drive/MyDrive/MINI PROJECT/Disease images/test"

# function to get count of images
def get_files(directory):
  if not os.path.exists(directory):
    return 0
  count=0
  for current_path,dirs,files in os.walk(directory):
    for dr in dirs:
      count+= len(glob.glob(os.path.join(current_path,dr+"/*")))
  return count    

train_samples =get_files(train_dir)
num_classes=len(glob.glob(train_dir+"/*"))
test_samples=get_files(test_dir) # For testing i took only few samples from unseen data. we can evaluate using validation data which is part of train data.
print(num_classes,"Classes")
print(train_samples,"Train images")
print(test_samples,"Test images")

# Preprocessing data.
train_datagen=ImageDataGenerator(rescale=1./255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   validation_split=0.2, # validation split 20%.
                                   horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

# set height and width and color of input image.
img_width,img_height =256,256
input_shape=(img_width,img_height,3)
batch_size =32

train_generator =train_datagen.flow_from_directory(train_dir,
                                                   target_size=(img_width,img_height),
                                                   batch_size=batch_size)
test_generator=test_datagen.flow_from_directory(test_dir,shuffle=True,
                                                   target_size=(img_width,img_height),
                                                   batch_size=batch_size)

train_generator.class_indices

test_generator.class_indices

# CNN building.
model = Sequential()
model.add(Conv2D(32, (3, 3),input_shape=[256,256,3],activation='relu'))
model.add(MaxPooling2D(pool_size=(3, 3)))
model.add(Conv2D(32, (3, 3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Conv2D(64, (3, 3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Flatten())
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.25))          
model.add(Dense(5,activation='softmax'))
model.summary()

# Model building to get trained with parameters.
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model_fit=model.fit(train_generator,steps_per_epoch=5,epochs=80,validation_data=test_generator)

classes=['Bacterial Disease','Fungal Disease','Healthy silkworm','Protozen Disease','Viral Disease ']

img=plt.imread('/content/peprine.jpg')

img=plt.imshow(img)

!pip install scikit-image

from skimage import transform

resize=transform.resize(img,(256,256,3))

img=plt.imshow(np.squeeze(img))

import numpy as np
import matplotlib.pyplot as plt

# Pre-Processing test data same as train data.
img_width=256
img_height=256
#model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

from tensorflow.keras.preprocessing import image

def prepare(img_path):
    img = image.load_img(img_path, target_size=(256, 256))
    x = image.img_to_array(img)
    x = x/255
    return np.expand_dims(x, axis=0)
    
    
result = model.predict([prepare('/content/peprine.jpg')])
disease=image.load_img('/content/peprine.jpg')
plt.imshow(disease)

result

list_index=[0,1,2,3,4]
x=result 
for i in range(5):
  for j in range(5):
    if x[0][list_index[i]]>x[0][list_index[j]]:
      temp=list_index[i]
      list_index[i]=list_index[j]
      list_index[j]=temp

print(list_index)

for i in range(1):
  print(classes[list_index[i]])
disease